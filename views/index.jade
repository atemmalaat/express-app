extends layout

block content
  div(class="container")
    h1 Atem Bior's Movies Api
    p 24 Jun 2025
    br
    br

    h1(class="text-3xl font-bold text-center text-gray-800 mb-4") Movie Search

    form#searchForm(class="flex flex-col gap-4 mb-8 p-4 border rounded-lg bg-gray-50")
      h2(class="text-xl font-semibold text-gray-700 mb-3") Search Movies
      label(for="movieTitle" class="sr-only") Movie Title
      input(type="text" id="movieTitle" placeholder="e.g., Wind, Point, America" required)
      button(type="submit") Search Movies

    div#messageBox(class="message-box hidden mb-8")

    div#results(class="space-y-3 mb-8")
      //- Search results will be displayed here

    // --- NEW: Movie Poster Search Form ---
    h1(class="text-3xl font-bold text-center text-gray-800 mb-4") Search Movie Poster

    form#posterSearchForm(class="flex flex-col gap-4 p-4 border rounded-lg bg-gray-50")
      h2(class="text-xl font-semibold text-gray-700 mb-3") Find Poster by IMDb ID
      label(for="posterTconst") IMDb ID (tconst):
      input(type="text" id="posterTconst" placeholder="e.g., tt0035423" required)
      button(type="submit") Get Poster

    div#posterResults(class="poster-results space-y-4 mb-8")
      //- Poster search results will be displayed here

  script.
    // Client-side JavaScript for handling both forms
    const searchForm = document.getElementById('searchForm');
    const movieTitleInput = document.getElementById('movieTitle');
    const resultsDiv = document.getElementById('results');
    const messageBox = document.getElementById('messageBox');

    // New elements for poster search
    const posterSearchForm = document.getElementById('posterSearchForm');
    const posterTconstInput = document.getElementById('posterTconst');
    const posterResultsDiv = document.getElementById('posterResults');

    // Function to display messages in a custom message box
    function displayMessage(message, type = 'info') {
        messageBox.textContent = message;
        messageBox.classList.remove('hidden', 'bg-red-200', 'bg-orange-200', 'text-red-800', 'text-orange-800');
        if (type === 'error') {
            messageBox.classList.add('bg-red-200', 'text-red-800');
        } else if (type === 'warning') {
            messageBox.classList.add('bg-orange-200', 'text-orange-800');
        } else {
            messageBox.classList.add('bg-orange-200', 'text-orange-800'); // Default info style
        }
        messageBox.style.display = 'block'; // Ensure it's visible
    }

    // Function to hide the message box
    function hideMessage() {
        messageBox.style.display = 'none';
        messageBox.textContent = '';
    }

    // --- Search Form Listener ---
    searchForm.addEventListener('submit', async (event) => {
        event.preventDefault(); // Prevent default form submission

        const searchTerm = movieTitleInput.value.trim();
        resultsDiv.innerHTML = ''; // Clear previous results
        hideMessage(); // Hide any previous messages
        posterResultsDiv.innerHTML = ''; // Clear poster results when searching movies

        if (!searchTerm) {
            displayMessage('Please enter a movie title to search.', 'warning');
            return;
        }

        try {
            const response = await fetch(`http://localhost:3000/movies/search?title=${encodeURIComponent(searchTerm)}`);
            const data = await response.json();

            if (response.ok) {
                if (data.Error === false && data.Movies && data.Movies.length > 0) {
                    data.Movies.forEach(movie => {
                        const movieItem = document.createElement('div');
                        movieItem.classList.add('movie-item');
                        movieItem.innerHTML = `
                            <div class="movie-title">${movie.primaryTitle}</div>
                            <div class="movie-details">
                                <strong>Year:</strong> ${movie.startYear || 'N/A'}<br>
                                <strong>IMDb ID:</strong> ${movie.tconst || 'N/A'}<br>
                                <strong>Type:</strong> ${movie.titleType || 'N/A'}<br>
                                <strong>Genres:</strong> ${movie.genres || 'N/A'}
                            </div>
                        `;
                        resultsDiv.appendChild(movieItem);
                    });
                } else if (data.Error === false && data.Movies && data.Movies.length === 0) {
                    displayMessage('No movies found matching your search.', 'info');
                } else {
                    displayMessage(data.Message || 'An unknown error occurred.', 'error');
                }
            } else {
                displayMessage(`Error: ${response.status} - ${data.Message || 'Failed to fetch movies.'}`, 'error');
            }
        } catch (error) {
            console.error('Fetch error:', error);
            displayMessage('Could not connect to the server. Please ensure the backend is running.', 'error');
        }
    });

    // --- NEW: Poster Search Form Listener ---
    posterSearchForm.addEventListener('submit', async (event) => {
        event.preventDefault(); // Prevent default form submission

        const tconst = posterTconstInput.value.trim();
        posterResultsDiv.innerHTML = ''; // Clear previous poster results
        resultsDiv.innerHTML = ''; // Clear movie search results
        hideMessage(); // Hide any previous messages

        if (!tconst) {
            displayMessage('Please enter an IMDb ID (tconst) to get the poster.', 'warning');
            return;
        }

        try {
            // Fetch poster from your backend endpoint
            const response = await fetch(`http://localhost:3000/movies/poster/${encodeURIComponent(tconst)}`);
            const data = await response.json();

            if (response.ok) {
                if (data.Error === false && data.Poster) {
                    const posterItem = document.createElement('div');
                    posterItem.classList.add('poster-item');
                    posterItem.innerHTML = `
                        <h3 class="poster-title">${data.Title || 'N/A'} (${data.Year || 'N/A'})</h3>
                        <img src="${data.Poster}" alt="Movie Poster for ${data.Title}" class="poster-image" onerror="this.onerror=null;this.src='https://placehold.co/200x300/e0e0e0/555555?text=No+Poster';">
                        <p class="text-sm text-gray-500 mt-2">IMDb ID: ${tconst}</p>
                    `;
                    posterResultsDiv.appendChild(posterItem);
                } else {
                    displayMessage(data.Message || 'Poster not found for this IMDb ID.', 'info');
                }
            } else {
                displayMessage(`Error: ${response.status} - ${data.Message || 'Failed to fetch poster.'}`, 'error');
            }
        } catch (error) {
            console.error('Fetch error:', error);
            displayMessage('Could not connect to the server to fetch poster. Please ensure the backend is running and OMDb API key is valid.', 'error');
        }
    });
